# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QPushButton, QWidget, QMainWindow, QApplication, QFileDialog, 
    QTableWidgetItem, QVBoxLayout, QHBoxLayout, QLineEdit, QButtonGroup)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import (
   FigureCanvasQTAgg as FigureCanvas)    
import csv
import os
import soundfile as sf
from Processing.ImpIR import ImportarRI
from Processing.Noise_cut import Lund
from Processing.Filters import filtroter, filtroter_mono, Normal
from Processing.Norm import Normal
from Processing.Schroeder import schroeder
from Processing.MediaMovilFilter import filtrado_FMM
from Processing.Ac_Parameters import rt_descriptors 
from Processing.Ac_Parameters import IACC_e
from pathlib import Path
from scipy import signal

class Ui_RIR(object):
    def setupUi(self, RIR):
        RIR.setObjectName("RIR")
        RIR.resize(1100, 759)
        RIR.setMinimumSize(QtCore.QSize(1100, 680))
        RIR.setWindowIcon(QtGui.QIcon(str(Path("RIRs-icon.png"))))
        self.centralwidget = QtWidgets.QWidget(RIR)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setFocusPolicy(QtCore.Qt.NoFocus)
        self.centralwidget.setStyleSheet("background-color: rgb(38, 38, 50);")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.fr_encabezado = QtWidgets.QFrame(self.frame)
        self.fr_encabezado.setStyleSheet("\n"
                "background-color: rgb(38, 38, 50);")
        self.fr_encabezado.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fr_encabezado.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fr_encabezado.setObjectName("fr_encabezado")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.fr_encabezado)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.fr_typeRIR = QtWidgets.QFrame(self.fr_encabezado)
        self.fr_typeRIR.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fr_typeRIR.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fr_typeRIR.setObjectName("fr_typeRIR")
        self.gB_typeRIR = QtWidgets.QGroupBox(self.fr_typeRIR)
        self.gB_typeRIR.setGeometry(QtCore.QRect(10, 10, 231, 91))
        self.gB_typeRIR.setStyleSheet("font: 8pt \"Medel\";\n"
                "color: rgb(255, 255, 255);")
        self.gB_typeRIR.setObjectName("gB_typeRIR")
        self.rB_Mono = QtWidgets.QRadioButton(self.gB_typeRIR)
        self.rB_Mono.setGeometry(QtCore.QRect(10, 30, 111, 23))
        self.rB_Mono.setObjectName("rB_Mono")
        self.pB_Signal = QtWidgets.QPushButton(self.gB_typeRIR)
        self.pB_Signal.setGeometry(QtCore.QRect(60, 60, 111, 23))
        self.pB_Signal.setStyleSheet("QPushButton{\n"
                "    border: 2px solid rgb(69, 113, 213);\n"
                "    border-radius: 10px;\n"
                "    background: rgb(69, 113, 213);\n"
                "    color: rgb(255, 255, 255)\n"
                "}\n"
                "QPushButton:hover{\n"
                "    border: rgb(96, 133, 213);\n"
                "    background: rgb(96, 133, 213);\n"
                "}")
        self.pB_Signal.setObjectName("pB_Signal")
        self.rB_Stereo = QtWidgets.QRadioButton(self.gB_typeRIR)
        self.rB_Stereo.setGeometry(QtCore.QRect(110, 30, 111, 23))

        self.rB_Stereo.setObjectName("rB_Stereo")
        self.horizontalLayout.addWidget(self.fr_typeRIR)
        self.fr_Filter = QtWidgets.QFrame(self.fr_encabezado)
        self.fr_Filter.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fr_Filter.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fr_Filter.setObjectName("fr_Filter")
        self.gB_Filter = QtWidgets.QGroupBox(self.fr_Filter)
        self.gB_Filter.setGeometry(QtCore.QRect(10, 10, 151, 91))
        self.gB_Filter.setStyleSheet("font: 8pt \"Medel\";\n"
                "color: rgb(255, 255, 255);")
        self.gB_Filter.setObjectName("gB_Filter")
        self.rB_Octave = QtWidgets.QRadioButton(self.gB_Filter)
        self.rB_Octave.setGeometry(QtCore.QRect(10, 30, 82, 17))
        self.rB_Octave.setObjectName("rB_Octave")
        self.rB_Third = QtWidgets.QRadioButton(self.gB_Filter)
        self.rB_Third.setGeometry(QtCore.QRect(10, 50, 131, 17))
        self.rB_Third.setObjectName("rB_Third")
        self.horizontalLayout.addWidget(self.fr_Filter)
        self.fr_Smoothing = QtWidgets.QFrame(self.fr_encabezado)
        self.fr_Smoothing.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fr_Smoothing.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fr_Smoothing.setObjectName("fr_Smoothing")
        self.gB_Smoothing = QtWidgets.QGroupBox(self.fr_Smoothing)
        self.gB_Smoothing.setGeometry(QtCore.QRect(10, 10, 241, 91))
        self.gB_Smoothing.setStyleSheet("font: 8pt \"Medel\";\n"
                "color: rgb(255, 255, 255);")
        self.gB_Smoothing.setObjectName("gB_Smoothing")
        self.rB_MMF = QtWidgets.QRadioButton(self.gB_Smoothing)
        self.rB_MMF.setGeometry(QtCore.QRect(10, 30, 82, 17))
        self.rB_MMF.setObjectName("rB_MMF")
        self.rB_Schoeder = QtWidgets.QRadioButton(self.gB_Smoothing)
        self.rB_Schoeder.setGeometry(QtCore.QRect(10, 50, 111, 17))
        self.rB_Schoeder.setObjectName("rB_Schoeder")
        self.bGroup = QButtonGroup()
        self.bGroup.addButton(self.rB_Schoeder)
        self.bGroup.addButton(self.rB_MMF)
        self.lineE_Samples = QtWidgets.QLineEdit(self.gB_Smoothing)
        self.lineE_Samples.setGeometry(QtCore.QRect(152, 30, 81, 20))
        self.lineE_Samples.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                " color: rgb(0,0,0);")
        self.lineE_Samples.setObjectName("lineE_Samples")
        #self.lineE_Samples.setEnabled(False)
        self.horizontalLayout.addWidget(self.fr_Smoothing)
        self.fr_Calculate_Export = QtWidgets.QFrame(self.fr_encabezado)
        self.fr_Calculate_Export.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fr_Calculate_Export.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fr_Calculate_Export.setObjectName("fr_Calculate_Export")
        self.groupBox_5 = QtWidgets.QGroupBox(self.fr_Calculate_Export)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 10, 231, 91))
        self.groupBox_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.groupBox_5.setObjectName("groupBox_5")
        self.pB_Calculate = QtWidgets.QPushButton(self.groupBox_5)
        self.pB_Calculate.setGeometry(QtCore.QRect(10, 40, 91, 23))
        font = QtGui.QFont()
        font.setFamily("Medel")
        self.pB_Calculate.setFont(font)
        self.pB_Calculate.setStyleSheet("QPushButton{\n"
                "    border: 2px solid rgb(69, 113, 213);\n"
                "    border-radius: 10px;\n"
                "    background: rgb(69, 113, 213);\n"
                "    color: rgb(255, 255, 255)\n"
                "}\n"
                "QPushButton:hover{\n"
                "    border: rgb(96, 133, 213);\n"
                "    background: rgb(96, 133, 213);\n"
                "}\n"
                "\n"
                "\n"
                "")
        self.pB_Calculate.setObjectName("pB_Calculate")
        self.pB_Export = QtWidgets.QPushButton(self.groupBox_5)
        self.pB_Export.setGeometry(QtCore.QRect(120, 40, 101, 23))
        self.pB_Export.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Medel")
        self.pB_Export.setFont(font)
        self.pB_Export.setStyleSheet("QPushButton{\n"
                "    border: 2px solid rgb(69, 113, 213);\n"
                "    border-radius: 10px;\n"
                "    background: rgb(69, 113, 213);\n"
                "    color: rgb(255, 255, 255)\n"
                "}\n"
                "QPushButton:hover{\n"
                "    border: rgb(96, 133, 213);\n"
                "    background: rgb(96, 133, 213);\n"
                "}\n"
                "\n"
                "\n"
                "")
        self.pB_Export.setObjectName("pB_Export")
        self.horizontalLayout.addWidget(self.fr_Calculate_Export)
        self.verticalLayout_2.addWidget(self.fr_encabezado)
        self.fr_grafico = QtWidgets.QFrame(self.frame)
        self.fr_grafico.setStyleSheet("background-color: rgb(38, 38, 50);")
        self.fr_grafico.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fr_grafico.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fr_grafico.setObjectName("fr_grafico")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.fr_grafico)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gV_Graphic = QtWidgets.QGraphicsView(self.fr_grafico)
        self.gV_Graphic.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.gV_Graphic.setObjectName("gV_Graphic")
        self.gridLayout_2.addWidget(self.gV_Graphic, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.fr_grafico)
        self.fr_tabla = QtWidgets.QFrame(self.frame)
        self.fr_tabla.setStyleSheet("background-color: rgb(38, 38, 50);")
        self.fr_tabla.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fr_tabla.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fr_tabla.setObjectName("fr_tabla")
        self.gridLayout = QtWidgets.QGridLayout(self.fr_tabla)
        self.gridLayout.setObjectName("gridLayout")
        self.tbl_AcoParam = QtWidgets.QTableWidget(self.fr_tabla)
        self.tbl_AcoParam.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "\n"
                "")
        self.tbl_AcoParam.setObjectName("tbl_AcoParam")
        self.gridLayout.addWidget(self.tbl_AcoParam, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.fr_tabla)
        self.verticalLayout_2.setStretch(0, 2)
        self.verticalLayout_2.setStretch(1, 6)
        self.verticalLayout_2.setStretch(2, 3)
        self.verticalLayout.addWidget(self.frame)
        RIR.setCentralWidget(self.centralwidget)

        self.pB_Export.setEnabled(False)
        self.pB_Signal.clicked.connect(self.selectIR)
        self.rB_Octave.clicked.connect(self.filter)
        self.rB_Third.clicked.connect(self.filter)
        self.layout = QHBoxLayout(self.gV_Graphic)  
        #self.layout = self.setLayout(self.layout)
        self.canvas = FigureCanvas(plt.Figure())
        self.layout.addWidget(self.canvas)  
        self.canvas.figure.subplots()
        self.pB_Calculate.clicked.connect(self.calculate)
        self.pB_Export.clicked.connect(self.export)

        self.LCh = None
        self.RCh = None
        self.mono = None
        self.fs = None
        self.ter = None
        self.signal = None
        self.Ir_Cut_Mono = None
        self.Ir_Cut_LCh = None
        self.Ir_Cut_RCh = None
        self.freq = None
        self.bool = bool
        self.mon_filt = None
        self.mon_filt_R = None
        self.signalL = None
        self.signalR = None
        self.nameColum = None
        self.dic = None

        self.retranslateUi(RIR)
        QtCore.QMetaObject.connectSlotsByName(RIR)

    def retranslateUi(self, RIR):
        _translate = QtCore.QCoreApplication.translate
        RIR.setWindowTitle(_translate("RIR", "RIR\'s Analyzer"))
        self.gB_typeRIR.setTitle(_translate("RIR", "Import RIR type:"))
        self.rB_Mono.setText(_translate("RIR", "Load mono"))
        self.pB_Signal.setText(_translate("RIR", "Load signal"))
        self.rB_Stereo.setText(_translate("RIR", "Load stereo"))
        self.gB_Filter.setTitle(_translate("RIR", "Filter:"))
        self.rB_Octave.setText(_translate("RIR", "Octave"))
        self.rB_Third.setText(_translate("RIR", "Third - octave"))
        self.gB_Smoothing.setTitle(_translate("RIR", "Smoothing:"))
        self.rB_MMF.setText(_translate("RIR", "MMF"))
        self.rB_Schoeder.setText(_translate("RIR", "Schroeder"))
        self.groupBox_5.setTitle(_translate("RIR", "Analyce and export:"))
        self.pB_Calculate.setText(_translate("RIR", "Calculate"))
        self.pB_Export.setText(_translate("RIR", "Export data"))


    # MÉTODOS   
    
    def insert_ax(self):  
        self.ax = self.canvas.figure.subplots()
        self.ax.set_ylim([0, 10])
        self.ax.set_xlim([0, 10])

    def enable_export(self):
        self.pB_Export.setEnabled(True)
        self.pB_Export.setStyleSheet(
            """
            QPushButton {
                border: 2px solid rgb(69, 113, 213);
                border-radius: 10px;
                background-color: rgb(69, 113, 213);
                color: rgb(255, 255, 255);
            }
            QPushButton:hover {
                border: rgb(96, 133, 213);
                background-color: rgb(96, 133, 213);
            }
        """
        )

    def selectIR(self):           
        dialog_response = QtWidgets.QFileDialog.getOpenFileName(
                caption = 'Seleccione una RIR',
                directory = os.getcwd())
        
        if self.rB_Mono.isChecked():
                self.LCh = 0
                self.RCh = 0
                if dialog_response[0] != "":         
                        self.mono, self.fs = sf.read(dialog_response[0])
                        ampMono = self.mono
                        max_Mono = np.argmax(abs(ampMono))
                        ampMono = ampMono[max_Mono:]
                        self.mon_filt = ampMono
                        self.Ir_Cut_Mono = Lund.lundeby_algorithm(ampMono
                                                                  , self.fs)

        if self.rB_Stereo.isChecked():
                self.mono = 0
                if dialog_response[0] != "":         
                        self.W, self.fs = sf.read(dialog_response[0])
                        self.LCh = self.W[:,0]
                        self.RCh = self.W[:,1]
                        ampLCh = self.LCh
                        max_LCh = np.argmax(abs(ampLCh))
                        ampLCh = ampLCh[max_LCh:]
                        self.signal_filteredLCh = ampLCh 
                        ampRCh = self.RCh
                        max_RCh = np.argmax(abs(ampRCh))
                        ampRCh = ampRCh[max_RCh:]
                        self.signal_filteredRCh = ampRCh
                        self.LCh = ampLCh
                        self.RCh = ampRCh
                        self.Ir_Cut_LCh = Lund.lundeby_algorithm(ampLCh, 
                                                                 self.fs) 
                        self.Ir_Cut_RCh=  Lund.lundeby_algorithm(ampRCh, 
                                                                 self.fs)  
            

    def filter(self):

        self.mon_filt_lun = []
        self.mon_filt_lun_R = []
        self.mon_filt_R = []
        self.signal = []
        self.signalR = []

        if self.rB_Mono.isChecked() and self.rB_Octave.isChecked():
              self.bool = False
              b = self.bool
              self.mon_filt_lun, self.freq = filtroter_mono(self.Ir_Cut_Mono,
                                                             self.fs, b)
              self.mon_filt , self.freq = filtroter_mono(self.mon_filt,
                                                          self.fs, b)

        elif  self.rB_Mono.isChecked() and self.rB_Third.isChecked():
              self.bool = True
              b = self.bool
              self.mon_filt_lun, self.freq = filtroter_mono(self.Ir_Cut_Mono,
                                                            self.fs, b)
              self.mon_filt , self.freq = filtroter_mono(self.mon_filt, 
                                                         self.fs, b)   

        if self.rB_Stereo.isChecked() and self.rB_Octave.isChecked():
              self.bool = False
              b = self.bool
              self.mon_filt_lun, self.mon_filt_lun_R, self.freq = filtroter(
                     self.Ir_Cut_LCh, self.Ir_Cut_RCh , self.fs, b)
              self.mon_filt, self.mon_filt_R, self.freq = filtroter(
                     self.LCh, self.RCh, self.fs, b)

        elif  self.rB_Stereo.isChecked() and self.rB_Third.isChecked():
              self.bool = True
              b = self.bool
              self.mon_filt_lun, self.mon_filt_lun_R, self.freq = filtroter(
                     self.Ir_Cut_LCh, self.Ir_Cut_RCh, self.fs, b)
              self.mon_filt, self.mon_filt_R, self.freq = filtroter(
                     self.LCh, self.RCh, self.fs, b)

  

    def calculate(self):
        
        # RIR MONO 
        if np.sum(self.mono) != 0:
                if self.rB_Octave.isChecked():
                        nameColumn = ['31.5 Hz', '63 Hz', '125 Hz', '250 Hz',
                                '500 Hz', '1000 Hz','2000 Hz', '4000 Hz',
                                '8000 Hz','16000 Hz']
                        self.nameColumn = nameColumn
                        self.tbl_AcoParam.setColumnCount(10)
                        self.tbl_AcoParam.setRowCount(8)
                        self.tbl_AcoParam.setHorizontalHeaderLabels(nameColumn)

                if self.rB_Third.isChecked():
                        nameColumn = ("25 Hz", "31.5 Hz", "40 Hz", "50 Hz", 
                                "63 Hz", "80 Hz", "100 Hz", "125 Hz", "160 Hz",
                                "200 Hz", "250 Hz", "315 Hz", "400 Hz", " Hz500",
                                "630 Hz", "800 Hz", "1 kHz","1.3 kHz","1.6 kHz",
                                "2 kHz", "2.5 kHz", "3.2 kHz", "4 kHz", "5 kHz", 
                                "6.3 kHz","8 kHz", "10 kHz", "12.5 kHz", "16 kHz",
                                  "20 kHz")
                        self.nameColumn = nameColumn
                        self.tbl_AcoParam.setColumnCount(30)
                        self.tbl_AcoParam.setRowCount(8)
                        self.tbl_AcoParam.setHorizontalHeaderLabels(nameColumn)

                nameRow = ('T30 [s]', 'T20 [s]', 'T10 [s]','EDT [s]','C50 [dB]',
                                                'C80 [dB]','Tt [s]', 'EDTt [s]')
                self.tbl_AcoParam.setVerticalHeaderLabels(nameRow)
        
                self.params_n = None
                self.params = None

                # Check for smoothing condition

                if self.rB_Schoeder.isChecked() and self.rB_Mono.isChecked():
                        self.lineE_Samples.setEnabled(False)
                        self.signal_i = []
                        i = 0
                        for i in range (len(self.freq)):
                                self.signal_i = schroeder(self.mon_filt_lun[i])
                                self.signal.append(self.signal_i)

                elif self.rB_Schoeder.isChecked() and self.rB_Stereo.isChecked():
                        self.lineE_Samples.setEnabled(False)
                        
                        self.signal_i = []
                        i = 0
                        # Calculate the acoustic parameters from one channel only.
                        for i in range (len(self.freq)): 
                                self.signal_i = schroeder(self.mon_filt_lun[i])
                                self.signal.append(self.signal_i)

                elif self.rB_MMF.isChecked() and self.rB_Mono.isChecked():
                        win = int(self.lineE_Samples.text())
                        self.signal_FMM = filtrado_FMM(self.mon_filt_lun, win)
                        self.signal_i = []
                        i=0
                        for i in range (len(self.freq)):
                                self.signal_i = 10*np.log10(
                                       self.signal_FMM[i]/self.signal_FMM[i].max())        
                                self.signal.append(self.signal_i)

                if self.rB_MMF.isChecked() and self.rB_Stereo.isChecked():
                        win = int(self.lineE_Samples.text())
                        self.signal_FMM = filtrado_FMM(self.mon_filt_lun, win)
                        self.signal_i = []
                        i=0
                        for i in range (len(self.freq)):
                                self.signal_i = 10*np.log10(
                                       self.signal_FMM[i]/self.signal_FMM[i].max())        
                                self.signal.append(self.signal_i)
                

                # Calculate parameters

                n = 0
                self.params = []
                for n in range (len(self.freq)):
                        self.params_n= rt_descriptors(self.signal[n], 
                                                self.mon_filt[n], self.fs)
                        self.params.append(self.params_n)
        
                i = 0
                t30_values = [d['t30'] for d in self.params]
                t20_values = [d['t20'] for d in self.params]
                t10_values = [d['t10'] for d in self.params]
                edt_values = [d['edt'] for d in self.params]
                C50_values = [d['C50'] for d in self.params]
                C80_values = [d['C80'] for d in self.params]
                tt_values = [d['tt'] for d in self.params]
                edt_t_values = [d['edt_t'] for d in self.params]
                dic = { "T30": np.round(np.array(t30_values), decimals=3),
                        "T20": np.round(np.array(t20_values), decimals=3),
                        "T10": np.round(np.array(t10_values),decimals=3),
                        "EDT": np.round(np.array(edt_values),decimals=3),
                        "C50":np.round( np.array(C50_values),decimals=3),
                        "C80": np.round(np.array(C80_values),decimals=3),
                        "Tt": np.round(np.array(tt_values),decimals=3),
                        "EDTt": np.round(np.array(edt_t_values),decimals=3)
                }
                
                # dic_act = {}
                # for clave, valor in dic.items():
                #         val_act= np.char.replace(valor.astype(str), '.', ',').astype(float)
                #         dic_act[clave] = val_act
                self.dic = dic      
                c = np.array(['T30', 'T20','T10', 'EDT','C50', 'C80', 'Tt',
                               'EDTt'])
                column = 0
                for key in range(0, len(c)):  # Setting the values into the results table
                        for value in dic[c[key]]:
                                celda= QTableWidgetItem(str(value))
                                self.tbl_AcoParam.setItem(0, column, celda)
                                
                                column += 1

                # etc = (np.array([ETC]))
                # etc = etc[0]
                # ETC = 10 * np.log10(etc + sys.float_info.epsilon)

                ETC = self.mon_filt
                smooth = self.signal
                freq = self.freq
                _xlimsup = freq.shape[0]
                # a = np.arange(0, len(ETC)/self.fs, 1/self.fs)
                # t = a[:len(ETC)]

                ax = self.canvas.figure.axes[0]
                ax.cla()
                #ax.plot(freq, ETC, label='Energy')

                ax.plot( smooth[5], label="Schroeder")
                ax.plot( 10 * np.log10((self.mon_filt_lun[5])/max(self.mon_filt_lun[5])), label="Signal")
               # ax.set(xlabel='Frecuency [s]', ylabel='Energy [dB]',
                 #       xlim=(0, _xlimsup), ylim=(-100, max(ETC)))
                ax.legend(loc=1)
                ax.figure.tight_layout(pad=0.1)
                self.canvas.draw()
                self.canvas.grid()


                self.enable_export()

        # RIR STEREO
        if np.sum(self.LCh) !=0 and np.sum(self.RCh)!=0:
                if self.rB_Octave.isChecked():
                        nameColumn = ['31.5 Hz', '63 Hz', '125 Hz', '250 Hz', '500 Hz', '1000 Hz',
                                '2000 Hz', '4000 Hz','8000 Hz', '16000 Hz']
                        self.tbl_AcoParam.setColumnCount(10)
                        self.tbl_AcoParam.setRowCount(9)
                        self.tbl_AcoParam.setHorizontalHeaderLabels(nameColumn)

                if self.rB_Third.isChecked():
                        nameColumn = ("25 Hz", "31.5 Hz", "40 Hz", "50 Hz", "63 Hz", "80 Hz", "100 Hz", "125 Hz", "160 Hz",
                                                "200 Hz", "250 Hz", "315 Hz", "400 Hz", " Hz500", "630 Hz", "800 Hz", "1 kHz",
                                                "1.3 kHz", "1.6 kHz", "2 kHz", "2.5 kHz", "3.2 kHz", "4 kHz", "5 kHz", "6.3 kHz",
                                                "8 kHz", "10 kHz", "12.5 kHz", "16 kHz", "20 kHz")
                        self.tbl_AcoParam.setColumnCount(30)
                        self.tbl_AcoParam.setRowCount(9)
                        self.tbl_AcoParam.setHorizontalHeaderLabels(nameColumn)

                nameRow = ('T30 [s]', 'T20 [s]', 'T10 [s]','EDT [s]','C50 [dB]','C80 [dB]','Tt [s]', 'EDTt [s]', 'IACC_e')
                self.tbl_AcoParam.setVerticalHeaderLabels(nameRow)
        
                self.params_n = None
                self.paramsR_n = None
                self.params = None

                # Check for smoothing condition

                if self.rB_Schoeder.isChecked() and self.rB_Mono.isChecked():
                        self.lineE_Samples.setEnabled(False)
                        self.signal_i = []
                        i = 0
                        for i in range (len(self.freq)):
                                self.signal_i = schroeder(self.mon_filt_lun[i])
                                self.signal.append(self.signal_i)

                elif self.rB_Schoeder.isChecked() and self.rB_Stereo.isChecked():
                        self.lineE_Samples.setEnabled(False)
                        IACCe = IACC_e(self.mon_filt, self.mon_filt_R, self.fs)  # calculate IACCe if there is a stereo signal from the RIRs

                        self.signal_i = []
                        self.signalR_i = []
                        i = 0
                        for i in range (len(self.freq)): # calculate the acoustic parameters from one channel only
                                self.signal_i = schroeder(self.mon_filt_lun[i])
                                self.signalR_i = schroeder(self.mon_filt_lun_R[i])
                                self.signal.append(self.signal_i)
                                self.signalR.append(self.signalR_i)

                
                elif self.rB_MMF.isChecked() and self.rB_Mono.isChecked():
                        win = int(self.lineE_Samples.text())
                        self.signal_FMM = filtrado_FMM(self.mon_filt_lun, win)
                        self.signal_i = []
                        i=0
                        for i in range (len(self.freq)):
                                self.signal_i = 10*np.log10(self.signal_FMM[i]/self.signal_FMM[i].max())        
                                self.signal.append(self.signal_i)

                if self.rB_MMF.isChecked() and self.rB_Stereo.isChecked():
                        win = int(self.lineE_Samples.text())
                        IACCe = IACC_e(self.mon_filt, self.mon_filt_R, self.fs)

                        self.signal_FMM = filtrado_FMM(self.mon_filt_lun, win)
                        self.signalR_FMM = filtrado_FMM(self.mon_filt_lun_R, win)
                        self.signal_i = []
                        self.signalR_i = []
                        i=0
                        for i in range (len(self.freq)):
                                self.signal_i = 10*np.log10(self.signal_FMM[i]/self.signal_FMM[i].max())        
                                self.signal.append(self.signal_i)
                                self.signalR_i = 10*np.log10(self.signalR_FMM[i]/self.signalR_FMM[i].max())  
                                self.signalR.append(self.signalR_i)
                # Calculate parameters

                n = 0
                self.params = []
                self.paramsR = []
                for n in range (len(self.freq)):
                        self.params_n= rt_descriptors(self.signal[n], self.mon_filt[n], self.fs)
                        self.params.append(self.params_n)
                        self.paramsR_n= rt_descriptors(self.signalR[n], self.mon_filt_R[n], self.fs)
                        self.paramsR.append(self.paramsR_n)

                self.params = self.paramsR.copy()

                i = 0
                t30_values = [d['t30'] for d in self.params]
                t20_values = [d['t20'] for d in self.params]
                t10_values = [d['t10'] for d in self.params]
                edt_values = [d['edt'] for d in self.params]
                C50_values = [d['C50'] for d in self.params]
                C80_values = [d['C80'] for d in self.params]
                tt_values = [d['tt'] for d in self.params]
                edt_t_values = [d['edt_t'] for d in self.params]
                dic = { "T30": np.round(np.array(t30_values), decimals=3),
                        "T20": np.round(np.array(t20_values), decimals=3),
                        "T10": np.round(np.array(t10_values),decimals=3),
                        "EDT": np.round(np.array(edt_values),decimals=3),
                        "C50":np.round( np.array(C50_values),decimals=3),
                        "C80": np.round(np.array(C80_values),decimals=3),
                        "Tt": np.round(np.array(tt_values),decimals=3),
                        "EDTt": np.round(np.array(edt_t_values),decimals=3)
                }
                dic['IACCe'] = IACCe
                self.dic = dic
                c = np.array(['T30', 'T20','T10', 'EDT','C50', 'C80', 'Tt', 'EDTt', 'IACCe'])
                column = 0
                for key in range(0, len(c)):  # Setting the values into the results table
                        for value in dic[c[key]]:
                                celda= QTableWidgetItem(str(value))
                                self.tbl_AcoParam.setItem(0, column, celda)
                                
                                column += 1

                self.enable_export()
                
        # ETC = self.mon_filt
        # smooth = self.signal
        # a = np.arange(0, len(ETC)/self.fs, 1/self.fs)
        # t = a[:len(ETC)]
        # ax = self.canvas.figure.axes[0]
        # ax.cla()
        # ax.plot(t, ETC, label='Energy')
        # ax.plot(t, smooth, label=self.bGroup.checkedButton())
        # try:
        #         xlim_max = int(np.where(smooth <= -80)[0][0] * 1.1)
        #         if xlim_max > t.size:
        #                 xlim_max = t.size-1
        # except:
        #         xlim_max = t.size-1
        # ax.set(xlabel='Time [s]', ylabel='Energy [dB]',
        #         xlim=(0, t[xlim_max]), ylim=(-100, max(ETC)))
        # ax.legend(loc=1)
        # ax.figure.tight_layout(pad=0.1)
        # self.canvas.draw()

    def export(self):

        NameFile=QFileDialog.getSaveFileName(RIR, "Save results", 
                "C:\\Users\\riosg\\OneDrive\\Documentos\\IMA\\TPs_2023\\TP10_v2\\TP10", 
                filter="CSV Files (*.csv)")
        # Obtener las claves y los valores del diccionario
        Key = list(self.dic.keys())
        Val = list(self.dic.values())

        # Seteo del dataFrame con sus índices requeridos.
        df = pd.DataFrame(Val, columns=self.nameColumn, index=Key)
        #decimal_format = "{:.3f}"
        df.to_csv(NameFile[0], sep=';')



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    RIR = QtWidgets.QMainWindow()
    ui = Ui_RIR()
    ui.setupUi(RIR)
    RIR.showMaximized()
    sys.exit(app.exec_())
